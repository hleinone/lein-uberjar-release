h1. Leiningen Uberjar Release Plug-in

The release plug-in automatically manages your project's version string and deploys the built artifact for you.  Note that your project must follow the maven conventions for version strings in order for lein-release to operate: http://mojo.codehaus.org/versions-maven-plugin/version-rules.html

The plug-in performs the following steps:

1. Modify the project.clj to drop the "-SNAPSHOT" suffix
2. Add the project.clj to the SCM system
3. Commit the project.clj to the SCM system
4. Tag the project with @projectName-version@
5. If the project jar file does not exist, it builds it with @lein uberjar@
6. Performs a deploy with the desired shell command
7. Increments the project minor version number and re-adds the "-SNAPSHOT" suffix
8. Add the project.clj to the SCM system
9. Commit the project.clj to the SCM system

h1. Usage

See "Leiningen: Installing Plugins":https://github.com/technomancy/leiningen/wiki/Upgrading#plugins

Add @[lein-uberjar-release "0.0.1"]@ to the @:user -> :plugins@ section of your @$HOME/.lein/profiles.clj@:

<pre>
{:user {:plugins [[lein-uberjar-release "0.0.1"]]}}
</pre>

To perform a release:

pre.    lein uberjar-release

h1. Configuration

The plug-in supports a @:uberjar-release@ map in the project.clj

h3. @:scm@

    @:uberjar-release {:scm :git}@

This can be used to specify the SCM (version control) system.  The release plug-in attempts to auto-detect the version control system by inspecting the current working directory (eg, for the @.git@ directory).  If this does not work for your project you can specify the SCM system explicitly.

The value of the @:shell@ key should be an array of command line arguments:

pre. :uberjar-release {:shell ["s3cmd" "put" "target/*.jar" "s3://blueant.com/deploy"]}

h1. Environment Variable: RELEASE_QUALIFIER

If set, this will be a suffix appended to the version of the released jar.  We have used this in the past to create custom releases of projects we don't control until patches are accepted or bugs are fixed (a fork), and in cases where we need to create either release candidates or incremental patches.

In the fork case, we would often add a @-rn@ suffix:

pre. RELEASE_QUALIFIER=-rn lein uberjar-release

In the latter case (release candidates or incremental patch):

pre. RELEASE_QUALIFIER=-rc1 lein uberjar-release

or:

pre. RELEASE_QUALIFIER=.1 lein uberjar-release

h1. Supported SCM Systems

Currently only git support is implemented.  Provisions have been made in the plug-in to support more SCM systems in the future.  Patches are welcome!

h1. Limitations

The plug-in uses simple heuristics (regexes!) to modify the version string in the project.clj.  If you have multiple lines (or comments) that look like a defproject it may not be able to succeed.  This approach was taken in order to not rewrite the entire project.clj file and thus loose things like formatting, indentation or comments.

h1. Authors

Kyle Burton <kyle.burton@gmail.com>
Paul Santa Clara
Hannu Leinonen

h1. License

Copyright (C) Relay Network LLC

Distributed under the Eclipse Public License, the same as Clojure.
